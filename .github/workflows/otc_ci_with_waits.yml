name: otc postman CI - new with waits

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest

    services:
      minikube:
        image: gcr.io/k8s-minikube/kicbase:v0.0.30
        ports:
          - 8000:8000
          - 30080:30080

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Start Minikube
      run: minikube start --driver=docker

    - name: Configure Kubeconfig
      run: minikube update-context

    - name: Pull Docker images
      run: |
        docker pull yvonnetest/otc-docker-backend-image:latest
        docker pull yvonnetest/otc-vite-react-frontend-image:latest

    - name: Load Docker images into Minikube
      run: |
        minikube image load yvonnetest/otc-docker-backend-image:latest
        minikube image load yvonnetest/otc-vite-react-frontend-image:latest

    - name: Apply PostgreSQL secrets
      run: kubectl apply -f ./k8s/postgres-secret.yaml

    - name: Apply PostgreSQL ConfigMap
      run: kubectl apply -f ./k8s/otc-postgres-config.yaml

    - name: Apply PostgreSQL PV
      run: kubectl apply -f ./k8s/postgres-pv.yaml

    - name: Apply PostgreSQL PVC
      run: kubectl apply -f ./k8s/postgres-pvc.yaml

    - name: Apply PostgreSQL Deployment and Service
      run: | 
        kubectl apply -f ./k8s/postgres-deployment.yaml
        kubectl apply -f ./k8s/postgres-service.yaml


    - name: Get PostgreSQL Pod Logs
      run: |
        kubectl logs $(kubectl get pods --selector=app=postgres -o jsonpath='{.items[0].metadata.name}')

    - name: Check PostgreSQL Service
      run: kubectl get services postgres

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f ./k8s/rabbitmq-deployment.yaml
        kubectl apply -f ./k8s/rabbitmq-service.yaml
        kubectl apply -f ./k8s/otc-backend-deployment.yaml --validate=false
        kubectl apply -f ./k8s/otc-backend-service.yaml --validate=false
        kubectl apply -f ./k8s/combined-ingress.yaml --validate=false

    
    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '21'

    - name: Install Newman
      run: npm install -g newman

    - name: Wait for Spring Boot backend to be ready
      run: |
        kubectl rollout status deployment/otc-backend --timeout=300s

    - name: Check backend pod logs
      run: |
        kubectl logs $(kubectl get pods --selector=app=otc-backend -o jsonpath='{.items[0].metadata.name}')


    - name: List all pods and services
      run: |
        kubectl get pods
        kubectl get services

    - name: Describe backend deployment and service
      run: |
        kubectl describe deployment otc-backend
        kubectl describe service otc-backend-service

    - name: Run Postman tests
      run: newman run https://raw.githubusercontent.com/yvonnekw/otc_backend_api_postman_tests/fix_github_actions/collections/otc-for-ci.postman_collection.json -e https://raw.githubusercontent.com/yvonnekw/otc_backend_api_postman_tests/main/collections/otc.postman_environment.json --global-var "baseUrl=http://otc-backend-service:8000" --delay-request 1000

    - name: Save test results
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: postman-test-results
        path: newman/
